#include <array>
#include <bitset>
#include <iostream>
#include <fstream>
#include <regex>
#include <sstream>
#include <string>
#include <vector>

using namespace std;

const static regex REGEX_PATTERN = regex("([a-g]+) ([a-g]+) ([a-g]+) ([a-g]+) ([a-g]+) ([a-g]+) ([a-g]+) ([a-g]+) ([a-g]+) ([a-g]+) \\| ([a-g]+) ([a-g]+) ([a-g]+) ([a-g]+)");

/*
const static array<unsigned int, 10> DIGITS {
	0b01110111, // 0
	0b00100100, // 1
	0b01011101, // 2
	0b01101101, // 3
	0b00101110, // 4
	0b01101011, // 5
	0b01111011, // 6
	0b00100101, // 7
	0b01111111, // 8
	0b01101111  // 9
};
*/

class WireToSegmentMapper {
	array<<bitset<7>, 7> _wires2segment; // per segment, remember which wires COULD activate it

	public:
	WireToSegmentMapper() {
		for (size_t i = 0; i < _mappings.size(); i++) {
			bitset<7> all_zeros;
			_wires2segment[i] = all_zeros;
		}
	}

	void addWire(size_t segment) {
		bitset<7> &wires = _wires2segment[segment];
		wires.set(segment, true);
		//_wires2segment[segment] = wires;
	}

	void removeWire(size_t segment) {
		bitset<7> &wires = _wires2segment[segment];
		wires.set(segment, false);
		//_wires2segment[segment] = wires;
	}
		
};

class SevenSegments {
	bitset<7> _segments;

	void parse(string &str) {
		for (size_t pos = 0; pos < str.length(); pos++) {
			switch (str[pos]) {
				case 'a': _segments.set(0, true); break;
				case 'b': _segments.set(1, true); break;
				case 'c': _segments.set(2, true); break;
				case 'd': _segments.set(3, true); break;
				case 'e': _segments.set(4, true); break;
				case 'f': _segments.set(5, true); break;
				case 'g': _segments.set(6, true); break;
			}
		}
	}

	public:
	SevenSegments() {}

	SevenSegments(string &str) {
		parse(str);
	} 

	bitset<8> getSegments() {
		return _segments;
	}

	string getSegmentsAsString() {
		string s = "";
		s += _segments[0] ? "a" : "";
		s += _segments[1] ? "b" : "";
		s += _segments[2] ? "c" : "";
		s += _segments[3] ? "d" : "";
		s += _segments[4] ? "e" : "";
		s += _segments[5] ? "f" : "";
		s += _segments[6] ? "g" : "";
		return s;
	}

	string getSegmentsAsBinaryString() {
		return _segments.to_string();
	}

	unsigned long getSegmentsAsDecimalValue() {
		return _segments.to_ulong();
	}

	bool equals(SevenSegments ss) {
		return ss.getSegmentsAsDecimalValue() == getSegmentsAsDecimalValue();
	}

};

class Sample {
	array<SevenSegments, 10> _input;
	array<SevenSegments, 4> _output;
	array<int, 10> _mapping = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
	WireToSegmentMapper _w2s;

	void parse(string &str) {
		smatch matches;
		bool match = regex_match(str, matches, REGEX_PATTERN);
		if (match) {
			for (size_t i = 1; i < matches.size(); i++) {
				string s = matches[i];
				SevenSegments ss(s);
				if (i <= 10) {
					_input[i - 1] = ss;
				} else {
					_output[i - 11] = ss;
				}
			}
		} else {
			cout << "Oops, " << str << " doesn't match regex!" << endl;
		}
	}
	
	size_t findOutputInInput(SevenSegments &output) {
		for (size_t pos = 0; pos < _input.size(); pos++) {
			SevenSegments input = _input[pos];
			if (output.equals(input)) {
				return pos;
			}
		}
		return -1;
	}

	void mapDigits() {
		for (size_t pos = 0; pos < _input.size(); pos++) {
			SevenSegments ss = _input[pos];
			bitset<7> bs = ss.getSegments();
			int bsc = bs.count();
			switch (bsc) {
				case 2:
					_mapping[pos] = 1;
				break;
				case 3:
					_mapping[pos] = 7;
				break;
				case 4:
					_mapping[pos] = 4;
				break;
				case 5:
					// TODO
				break;
				case 6:
					// TODO
				break;
				case 7:
					_mapping[pos] = 8;
				break;
			}
		}
	}

	int getMappedDigit(int digit) {
		
	}

	void mapWires() {
		// Segment 'a' is 7-segments - 1-segments	
		bitset<7> segments7 = _mapping[7]
	}

	public:
	Sample(string &str) {
		parse(str);
		mapDigits();
		mapWires();
		print();
	}

	unsigned long getDigits() {
		unsigned long res = 0;
		SevenSegments output;
		size_t pos;
		unsigned long digit;

		for (size_t i = 0; i < _output.size(); i++) {
			res *= 10;
			output = _output[i];
			pos = findOutputInInput(output);
			digit = _mapping[pos];
			res += digit;
		}

		return res;
	}

	void print() {
		cout << "Input:";
		for (size_t i = 0; i < _input.size(); i++) {
			cout << ' ' << _input[i].getSegmentsAsString();
			//cout << ' ' << _input[i].getSegmentsAsDecimalValue();
		}
		cout << endl << "Output:";
		for (size_t i = 0; i < _output.size(); i++) {
			cout << ' ' << _output[i].getSegmentsAsString();
			//cout << ' ' << _output[i].getSegmentsAsDecimalValue();
		}
		cout << endl << "Mapping:";
		for (size_t i = 0; i < _mapping.size(); i++) {
			cout << ' ' << _mapping[i];
		}
		cout << endl;
	}
};

class SegmentSearch {
	vector<Sample> _samples;
	unsigned long _answer = 0;

	void parse(vector<string> &input) {
		for (auto &str: input) {
			Sample sample(str);
			_samples.push_back(sample);
			unsigned long value = sample.getDigits();
			cout << "Digits: " << to_string(value) << endl;
			_answer += value;
		}
	}

	public:
	SegmentSearch(vector<string> &input) {
		parse(input);
	}

	unsigned long getAnswer() {
		return _answer;
	}

};

int main(int argc, char *argv[]) {
	// First command line argument is the file to open
	if (argc != 2) {
		cout << "Usage: day8b <input.txt>" << endl;
		return -1;
	}

	// Open file
	string path = argv[1];
	ifstream file(path);

	// Read file
	string str;
	vector<string> input;
	while (getline(file, str)) {
		input.push_back(str);
	}

	// And go!
	SegmentSearch ss(input);
	unsigned long answer = ss.getAnswer();
	cout << "Answer: " << to_string(answer) << endl;

	return 0;
}

